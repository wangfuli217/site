#+SETUPFILE: ~/site/tpl/site-tpl.org
#+TITLE: [译] C++书籍终极推荐
#+DATE: 2012-04-03 13:37:00

声明：

- 翻译仅以技术学习和交流为目的，如需转载请务必标明原帖链接。
- 来源：[[http://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list]]

英文水平有限，加上在 stackoverflow 混的人，母语都带一定的地方色彩。如果你觉得有误，欢迎留言指正。

* All levels
   :PROPERTIES:
   :CUSTOM_ID: all-levels
   :END:

1. C++程序设计语言 (Bjarne Stroustrup) <= The C++ Programming Language

   评：经典的C++入门教材。可以和 K&R 的那本相媲美，读起来感觉非常类似，它涵盖了所有 标准 C++ 语言的核心，面面俱到。
   这本书我没有读过，不做评价。"K&R" 的那本书指的是《C程序设计语言》，堪称经典，这本书我有。读完之后，感觉挺全面的，
   而且深深地可以感觉到一丝 UNIX 气息。

2. [[http://www.amazon.cn/s/ref=nb_sb_ss_i_2_5?__mk_zh_CN=%E4%BA%9A%E9%A9%AC%E9%80%8A%E7%BD%91%E7%AB%99&url=search-alias%3Dstripbooks&field-keywords=c%2B%2B%E6%A0%87%E5%87%86%E7%A8%8B%E5%BA%8F%E5%BA%93%E2%80%94%E8%87%AA%E4%BF%AE%E6%95%99%E7%A8%8B%E4%B8%8E%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C&x=0&y=0&sprefix=c%2B%2B%E6%A0%87%E5%87%86%2Cstripbooks%2C482][C++标准程序库:自修教程与参考手册]] (Nicolai josuttis) <= C++ Standard Library Tutorial and Reference

   评：C++ 标准库的介绍和参考手册
   个人觉得这本书是每个 C++ 程序员的必备书籍，书如其名，就是一本手册。整本书都在讲述 C++ 库函数。
   如果你想学习 C++ STL 的话，选择这本书先熟悉一下 STL 是一个很不错的选择。我看过 3 遍，每一遍都会有新的收获。

3. [[http://www.amazon.com/dp/0201183951/?tag=stackoverfl08-20][The C++ IO Streams and Locales]](Angelika Langer and Klaus Kreft)

   评：除了 C++ IOstream 和 locales 之外，几乎没有其他的涉及。如果你想知道关于 stream 和 locale ，这本书是你最好的选择。

   以前没听过这本书，我很少用 C++ IO 。习惯了 C 语言的格式化操作，总感觉 C++ 这块做的不好。

4. The C++ Standard(INCITS/ISO/IEC 14882-2011)

   评：This, of course, is the final arbiter of all that is or isn't C++.
   Be aware, however, that it is intended purely as a reference for experienced users willing to devote considerable time
   and effort to its understanding. As usual, the first release was quite expensive ($300+ US), but it has now been released
   in electronic form for $30US -- probably the least expensive of the reference books listed here.
   (个人没有能力翻译这段话，抱歉.)

* Beginer
   :PROPERTIES:
   :CUSTOM_ID: beginer
   :END:

** Introductory
    :PROPERTIES:
    :CUSTOM_ID: introductory
    :END:

如果你刚开始学习程序设计或者你有其他语言的使用经历，下面这些书籍高度推荐：

1. [[http://www.amazon.cn/C-Primer%E4%B8%AD%E6%96%87%E7%89%88-%E6%9D%8E%E6%99%AE%E6%9B%BC/dp/B00114DX08/ref=sr_1_1?ie=UTF8&qid=1333440612&sr=8-1][C++ primer]] (Stanley Lippman, Josée Lajoie, and Barbara E. Moo)

   评：1000 页左右的厚度，非常周全的的 C++ 介绍，涵盖了语言的方方面面，讲解非常详细。

   我是在看完《C++入门经典》之后看的《C++ primer》，并且之前学过 C 语言和数据结构。觉得还是有一定难度的，后面的面向对象和泛型几乎没怎么看懂。
   作为新手，这本书真的适合吗？我质疑。不过这本书的好是不可否认的，值得多看几遍。[针对第四版而言]

2. [[http://www.amazon.cn/Accelerated-C-Practical-Programming-by-Example-Moo-Barbara-E/dp/020170353X/ref=sr_1_2?s=books&ie=UTF8&qid=1333441879&sr=1-2][Accelerated C++]](Andrew Koenig and Barbara Moo)

   评: This basically covers the same ground as the C++ Primer, but does so on a fourth of its space.
   This is largely because it does not attempt to be an introduction to programming, but an introduction to C++ for people
   who've previously programmed in some other language. It has a steeper learning curve, but, for those who can cope with this,
   it is a very compact introduction into the language. (Historically, it broke new ground by being the first beginner's book
   using a modern approach at teaching the language.)

3. [[http://www.amazon.cn/C-%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3-%E5%9F%83%E5%85%8B%E5%B0%94/dp/B005CFUQR0/ref=sr_1_1?s=books&ie=UTF8&qid=1333442457&sr=1-1][C++ 编程思想]] (Bruce Eckel) [Thinking in C++]

   评：一共两卷，第二卷大部分在讲解标准库，但是仍旧非常好。

4. [[http://www.amazon.cn/C-%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E8%B7%B5-%E6%96%AF%E7%89%B9%E5%8A%B3%E6%96%AF%E7%89%B9%E9%B2%81%E6%99%AE/dp/B003VPX6YS/ref=sr_1_1?s=books&ie=UTF8&qid=1333442667&sr=1-1][C++程序设计原理与实践]] (Bjarne Stroustrup) => Programming: Principles and Practice Using C++

   评：非常好，不只是适合初学者的一本书。

** Best practices
    :PROPERTIES:
    :CUSTOM_ID: best-practices
    :END:

1. [[http://www.amazon.cn/Effective-C-%E4%B8%AD%E6%96%87%E7%89%88-Scott-Meyers/dp/B001130D9I/ref=sr_1_2?s=books&ie=UTF8&qid=1333442928&sr=1-2][Effective C++]]

   评：每个C++程序员都应该读的书。早期版本针对从 C 转到 C++ 的程序员。第三版做了修改，程序定位在向 java 这样的语言转变过来的 C++
   程序员。改善程序与设计的 55 个具体做法。 提升 C++ 功力必备书籍，真的很棒。

2. [[http://www.amazon.cn/Effective-STL-50-Specific-Ways-to-Improve-Your-Use-of-the-Standard-Template-Library-Meyers-Scott/dp/0201749629/ref=sr_1_1?s=books&ie=UTF8&qid=1333443479&sr=1-1][Effective STL]]

   有这本书，但是没有读完，不做评价。

* Intermediate
   :PROPERTIES:
   :CUSTOM_ID: intermediate
   :END:

1. [[http://www.amazon.cn/More-Effective-C-35%E4%B8%AA%E6%94%B9%E5%96%84%E7%BC%96%E7%A8%8B%E4%B8%8E%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95-%E6%A2%85%E8%80%B6/dp/B004IP8BD6/ref=sr_1_1?s=books&ie=UTF8&qid=1333444098&sr=1-1][More Effective C++]] (Scott Meyers)

   评：比 Effective C++ 更多的规则，没有 Effective C++ 那么重要，但是仍旧很应该知道。

    我有这本书，感觉里面的内容比 Effective C++ 要更细节和深入，有一部分没有看懂。听不错的书。

2. [[http://www.amazon.cn/Exceptional-C-Style-40-New-Engineering-Puzzles-Programming-Problems-and-Solutions-Sutter-Herb/dp/0201760428/ref=sr_1_8?s=books&ie=UTF8&qid=1333444510&sr=1-8][Exceptional C++]](Herb Sutter)

   评：资源管理和在 RAII 中的异常安全。pimple idiom, name lookup, good class disign, 和 C++ 内存模型。

   看评价就很想读了，等发工资了，果断买。

3. [[http://www.amazon.cn/More-Effective-C-35%E4%B8%AA%E6%94%B9%E5%96%84%E7%BC%96%E7%A8%8B%E4%B8%8E%E8%AE%BE%E8%AE%A1%E7%9A%84%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95-%E6%A2%85%E8%80%B6/dp/B004IP8BD6/ref=sr_1_1?s=books&ie=UTF8&qid=1333444601&sr=1-1][More Effective C++]] (Herb sutter)

   评：Effective C++ 的补充，包括异常安全的主题。除此之外，探讨了高效 C++ 面向对象编程和 STL 的错误使用。

4. [[http://www.amazon.cn/Exceptional-C-Style-40-New-Engineering-Puzzles-Programming-Problems-and-Solutions-Sutter-Herb/dp/0201760428/ref=sr_1_2?s=books&ie=UTF8&qid=1333445089&sr=1-2][Exceptional C++ style]] (Herb Sutter)

   评：讨论泛型编程编程，优化和资源管理。还优秀的展现了怎么用 C++ 非成员函数和单一职责原则 (single reponsibility principle) 写模块化代码。

5. [[http://www.amazon.cn/C-%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83-101%E6%9D%A1%E8%A7%84%E5%88%99-%E5%87%86%E5%88%99%E4%B8%8E%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5-%E8%90%A8%E7%89%B9/dp/B004CF9QXG/ref=sr_1_1?ie=UTF8&qid=1333456624&sr=8-1][C++编码规范]] (Herb Sutter and Andrei Alexandrescu) => C++ coding Standards

   评：编码规范并不意味着"在代码中缩进使用几个空格的问题"。这本书包含 101 个好的实践，风格(idioms)，和常见的陷阱可以帮助你去写正确的，
   易于理解的并且高效的 C++ 代码。

6. [[http://www.amazon.cn/C-Templates-The-Complete-Guide-Josuttis-Nicolai-M/dp/0201734842/ref=sr_1_1?ie=UTF8&qid=1333456967&sr=8-1][C++模板：完全指南]] (David Vandevoorde and Nicolai M. Josuttis) => C++ Template: The Complete Guide

   评：这是一本关于 C++ 模板的书籍。他涵盖了从最基础的到高级的模板元编程，非常详细的解释了模板的工作机理。
   对 ODR(One Defnition Rule)和重载的解析过程。

   这本书我是在大二的寒假看的，当时刚学完 C++ 语言。可能是基础不够的原因吧，只看了全书的 1/3 ，即模板的基础部分，之后就没怎么看了。
   尽管如此，那 1/3 的基础部分为我在之后的 STL 学习打好了基础，获益匪浅。想要学好 STL 的同学，一定要先去学模板，否则就相当于在被库函数。

* Above Intermediate
   :PROPERTIES:
   :CUSTOM_ID: above-intermediate
   :END:

1. [[http://www.amazon.cn/Modern-C-Design-Generic-Programming-and-Design-Patterns-Applied-Alexander-Andrei/dp/0201704315/ref=sr_1_1?ie=UTF8&qid=1333457766&sr=8-1][Modern C++ Design]] (Andrei Alexandrescu)

   评：这本书是高级泛型编程技巧开创性的书籍，引入了基于策略的设计，类型列表，和基本的泛型编程风格。
   解释了有多少有用的设计模式（包括小对象配置器，仿函数，工厂，访问者，和多方法）可以使用泛型编程高效，模块化和干净的的实现。

   A groundbreaking book on advanced generic programming techniques. Introduces policy-based design, type lists,
   and fundamental generic programming idioms then explains how many useful design patterns
   (including small object allocators, functors, factories, visitors, and multimethods) can be implemented efficiently,
   modularly, and cleanly using generic programming.

   看内容就好像读啊！

2. [[http://www.amazon.cn/C-Template-Metaprogramming-Concepts-Tools-and-Techniques-from-Boost-and-Beyond-With-CD-ROM-Gurtovoy-Aleksey/dp/0321227255/ref=sr_1_1?s=books&ie=UTF8&qid=1333458354&sr=1-1][C++模板元编程]] (David Abrahams and Aleksey Gurtovoy) => C++ Template Metaprogramming

* Classics/Older
   :PROPERTIES:
   :CUSTOM_ID: classicsolder
   :END:

标注：这些书中包括的一些信息可能不再适合现在或者不再是最好的实践方案。

1. [[http://www.amazon.cn/C-%E8%AF%AD%E8%A8%80%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%92%8C%E6%BC%94%E5%8C%96-Bjarne-Stroustrup/dp/B005ZOT5BQ/ref=sr_1_1?s=books&ie=UTF8&qid=1333458541&sr=1-1][C++语言的设计和演化]] (Bjarne Stroustrup) => The Design and Evoution of C++

   评：如果你想知道为什么 C++ 语言成为现在这个样子，这本书会告诉你答案。这本书涵盖了 C++ 标准化之前的所有故事。

2. [[http://www.amazon.cn/C-%E6%B2%89%E6%80%9D%E5%BD%95-%E8%8E%AB%E6%AC%A7/dp/B0013EK0Y8/ref=sr_1_2?ie=UTF8&qid=1333458897&sr=8-2][C++沉思录]](Andrew Koenig and Barbara Moo) => Ruminations on C++
3. [[http://www.amazon.cn/Advanced-C-Programming-Styles-and-Idioms-Coplien-James-O/dp/0201548550/ref=sr_1_1?ie=UTF8&qid=1333458997&sr=8-1][Advanced C++ Programming Styles and Idioms]] => James Coplien

   评：A predecessor of the pattern movement, it describes many C++-specific "idioms".
   It's certainly a very good book and still worth a read if you can spare the time,
   but quite old and not up-to-date with current C++.

4. [[http://www.amazon.cn/Large-Scale-C-Software-Design-Lakos-John/dp/0201633620/ref=sr_1_1?s=books&ie=UTF8&qid=1333459129&sr=1-1][大规模C++软件设计]] (John Lakos) => Large Scale C++ Software Design

   评：Lakos explains techniques to manage very big C++ software projects. Certainly a good read, if it only was up to date.
   It was written long before C++98, and misses on many features (e.g. namespaces) important for large scale projects.
   If you need to work in a big C++ software project, you might want to read it, although you need to take more than
   a grain of salt with it. There's been the rumor that Lakos is writing an up-to-date edition of the book for years.

5. 深度探索C++对象模型 (Stanley Lippman) => Inside the C++ Object Model

   评：如果你想知道虚函数表机制是怎样实现的和在一个多继承情况下，基对象是怎么在内存布局，这些怎么对性能造成影响。你可以找到这些主题的深入探讨。
   正在看这本书，不是很好理解。如果你没有一定的基础的话，我建议先别看了，越看越乱。看完之后，才知道以前的很多理解都是有误的。
   这本书翻译的不太行啊，有能力的话还是看英文版吧！
