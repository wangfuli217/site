#+SETUPFILE: ~/site/tpl/wiki-tpl.org
#+TITLE: Kubernetes 工作负载 - Pod
#+DATE: 2020-02-08 15:20:07

* 概览
** 理解 Pod

Pod 是 Kubernetes 的基本执行单元，是对象模型中创建或者部署的最小和最简单的单元。Pod 表示在集群上运行的进程。

Pod 封装了应用程序容器、存储、唯一网络 IP 以及控制器运行选项。

一个 Pod 表示部署单元：Kubernetes 中应用程序的单个实例。一个 Pod 包含的容器个数：

- *单个容器*
  一个 Pod 一个容器是最常见的 Kubernetes 用例；Kubernetes 直接管理 Pod，而不是容器。
- *多个紧密耦合且需要共享资源的容器*
  一般也是一个应用容器，其它的容器以 sidecar 的方式存在（系统级而非应用级）。

一个 Pod 表示单个实例，如果希望横向扩展应用程序，应该创建多个 Pod（而不是一个 Pod 多个容器）。
在 Kubernetes 中，这通常称之为 /副本(replication)/ 。一组副本通常由抽象的控制器来创建和管理。

*** Pod 是如何管理多个容器的

同一个 Pod 的容器会自动安排到集群中的同一个节点上，一起调度；容器可以共享资源、依赖、彼此通信、协调终止方式。

有些 Pod 具有 初始容器 和 应用容器。初始容器会在应用容器之前运行并完成。

Pod 为组成容器提供了两种资源：网络和存储。

*网络*

每个 Pod 分配一个 IP 地址。内部容器共享网络命名空间，包括 IP 地址和网络端口。内部容器可以使用 =localhost= 互相通信。

*存储*

一个 Pod 可指定一组共享存储卷。内部容器可以访问共享卷，允许容器共享数据。

** 使用 Pod

Pod 通常不会被单独使用，不方便用户管理而且本身不能自愈。Kubernetes 通常使用一个更高级别的抽象成为 /控制器/ 来管理。

*** Pod 和控制器

控制器可以创建和管理多个 Pod：处理副本和在集群范围内提供自愈功能。比如：一个节点失败了，控制器在不同的节点上调度副本。

包含一个或者多个 Pod 的控制器的示例包括：

- Deployment
- StatefulSet
- DaemonSet

控制器通常使用用户提供的 Pod 模板来创建它负责的 Pod。

*** Pod 模板

控制器使用 Pod 模板来制作实际使用的 Pod。比如：

#+BEGIN_SRC yaml
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app: myapp
spec:
  containers:
  - name: myapp-container
    image: busybox
    command: ['sh', '-c', 'echo Hello Kubernetes! && sleep 3600']
#+END_SRC
* TODO Pods

https://kubernetes.io/zh/docs/concepts/workloads/pods/pod/
