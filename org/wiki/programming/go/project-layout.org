#+SETUPFILE: ~/site/tpl/site-tpl.org
#+TITLE: Go 工程项目结构
#+DATE: 2019-06-09 17:08:00

不管是什么语言，稍微大的项目，目录布局都会有问题，只不过有些语言的框架自身就提供了目录结构规范。

对于 Golang 尤为明显，还是语言比较年轻的缘故，还没有权威性的规范。

[[https://github.com/golang-standards/project-layout][project-layout]] 提供了 Go 大中型项目的目录规范。简单摘抄如下：

|------------------+----------------+---------------------------------------------------------------------------------------------------------------------------------|
| 功能             | 目录           | 注意事项                                                                                                                        |
|------------------+----------------+---------------------------------------------------------------------------------------------------------------------------------|
| Go 目录          | ~/cmd/~        | 项目的主目录，一般只包含 ~main~ 函数，调用的代码应该写在 ~/internal~ 和 ~/pkg~ 目录下。                                         |
|                  | ~/internal~    | 私有项目和库代码。一般放置不希望其他人在应用程序或者库中导入的代码。                                                            |
|                  | ~/pkg~         | 外部应用程序可以使用的库代码。                                                                                                  |
|                  | ~/vendor~      | 应用程序依赖，由依赖管理工具（比如 ~dep~）管理的代码。注意如果你要构建库的时候， _不要_ 提交程序库依赖代码。                    |
|------------------+----------------+---------------------------------------------------------------------------------------------------------------------------------|
| 服务应用程序目录 | ~/api~         | OpenAPI/Swagger specs, JSON schema files, protocol definition files。                                                           |
| 常见应用程序目录 | ~/config~      | 配置文件模板或者默认配置，请把 ~confd~ 或者 ~consul-template~ 模板文件放到这里。                                                |
|                  | ~/init~        | 系统启动（systemd，upstart，sysv）和进程管理/supervisor（runit，supervisord）配置。                                             |
|                  | ~/scripts~     | 各种构建，安装，分析等操作脚本。这些脚本使得根目录下的 Makefile 保持简洁。                                                      |
|                  | ~/build~       | 打包和持续集成，容器构建配置和脚本放到 ~/build/packages~ 目录下，CI（travis，circle，drone）配置和脚本放到 ~/build/ci~ 目录下。 |
|                  | ~/deployments~ | IaaS，PaaS，系统和容器编排配置部署和模板（docker-compose，kubernetes/helm，mesos，terraform，bosh）。                           |
|                  | ~/test~        | 各种测试文件的目录                                                                                                              |
| 其它目录         | ~/docs~        | 设计和用户文档（不包含 godoc 生成的文档）。                                                                                     |
|                  | ~/tools~       |                                                                                                                                 |
|                  | ~/examples~    |                                                                                                                                 |
|                  | ~/third_party~ |                                                                                                                                 |
|                  | ~/githooks~    |                                                                                                                                 |
|                  | ~/assets~      | 静态资源（比如图片，logos 等）                                                                                                  |
|                  | ~/website~     | 如果不使用 Github pages，这里放置你的项目网站数据。                                                                             |
| 不应包含的目录   | ~/src~         | 容易混淆 ~$GOPATH~ 中的 ~/src~ 目录，极度不推荐。                                                                               |
|------------------+----------------+---------------------------------------------------------------------------------------------------------------------------------|
