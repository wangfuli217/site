#+SETUPFILE: ~/site/tpl/wiki-tpl.org
#+TITLE: Emacs
#+DATE: 2018-06-22 23:24:56
#+OPTIONS: num:n

* 开始之前

我在大学（2009 年左右）的时候接触 Linux（Ubuntu），选择编辑器时感觉 Vim 入门很难，只是因为好奇就选择了 Emacs。
大学期间和我的第一份工作主要的开发环境是 Windows，Emacs 虽然在私下里花了很多精力折腾，但正式使用 Emacs 作为开发环境是 2014 年以后，
之后工作环境主要聚焦在 Mac/CentOS/Ubuntu 上，直到现在，Emacs 都是我的主力编辑器：

- 前端 :: JavaSript/HTML/CSS/LESS, React(jsx)
- 后端 :: C/C++, Python/Django, Go
- 日常 :: Shell，YAML，JSON，...
- 写文章 :: org-mode

从 Emacs 22 到最新的 Emacs 26，Emacs 越来越好用了，常用的插件已经官方集成进去了，生态圈也越来越好了，有像 [[https://github.com/purcell][purcell]] 这样的牛人来领军配置，
还有 [[https://github.com/syl20bnr/spacemacs][spacemacs]] 这样集大成者开箱即用的配置。以前我写过 [[https://www.zhangjiee.com/blog/emacs-simple-tutorial][Emacs 简易教程]]，那个时候（2014年）还是主要使用 C/C++ 做游戏服务器开发，
那份教程已经很久没有更新了，后面我将集中经历维护这份文档。

另外，我的配置文件在 [[https://github.com/zhangjie2012/_emacs.d][_emacs.d]]。我的邮箱是 [[mailto:me@zhangjiee.com][me@zhangjiee.com]]，欢迎与我交流 Emacs 使用心得。

[[https://wiki-1252349778.cos.ap-shanghai.myqcloud.com/2019/emacs-hello.png]]

* 基础
** 安装 Emacs
*** Ubuntu 18.04

直接使用系统的包管理工具安装的 Emacs 版本都很低，推荐使用源码安装，当前最新的版本是 26.3。

下载源码：[[http://mirrors.ustc.edu.cn/gnu/emacs/][http://mirrors.ustc.edu.cn/gnu/emacs/]]

#+BEGIN_SRC shell
apt install make gcc g++ autoconf
apt-get install build-essential texinfo libx11-dev libxpm-dev libjpeg-dev libpng-dev libgif-dev libtiff-dev libgtk2.0-dev libncurses-dev
./autogen.sh
./configure
make -j4
sudo make install
#+END_SRC

打开 =.bashrc= 添加两行 alias：

#+BEGIN_SRC shell
alias em="env TERM=xterm-256color emacs -nw"
#+END_SRC

/注意/ ：如果编译提示 =configure: error: The following required libraries were not found: gnutls= 需要安装 =gnutls= 开发包，
使用 =apt-cache search 'libgnutls.*-dev'= 找到对应的包，然后安装 [fn:1]。

*** MacOS

#+BEGIN_SRC shell
brew install emacs
#+END_SRC

** 键位约定

Emacs 快捷键约定，所有的快捷键基本都是从这些前缀开始的，如下：

|-------+--------------------------------------------|
| 前缀  | 说明                                       |
| ~C-~  | Ctrl 键                                    |
| ~M-~  | Meta 键（键盘上的 Alt）                    |
| ~S-~  | Super 键（非 Mac 键盘上的 Win 键），很少用 |
| ~s-~  | Shift 键                                   |
| ~DEL~ | 退格键，而不是实际的 DELETE 键             |
| ~SPC~ | 空格键                                     |
|-------+--------------------------------------------|

Emacs 几乎所有的快捷键都是以 ~C-~ 开始的，也是 Emacs 令人诟病的一部分（伤小拇指，还好我的小拇指健在）。
系统默认的绑定键都是 ~C-x~ 开始的，用户自定义的大多是 ~C-c~ 开始的。

每个初学者建议先阅读 Emacs 的 ~help-with-tutorial~ （ =C-h t= ）。走一遍，基本上就可以流畅的操作 Emacs 了。

** 包安装与管理

因为某些原因官方的 elpa 源无法使用怎么办？ 可使用清华大学提供了 elpa 镜像源：[[https://mirror.tuna.tsinghua.edu.cn/help/elpa/][https://mirror.tuna.tsinghua.edu.cn/help/elpa/]] 。替代下面的：

#+BEGIN_SRC emacs-lisp
(setq package-archives
      '(
        ("gnu" . "https://elpa.gnu.org/packages/")
        ("melpa" . "https://melpa.org/packages/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")
        ("org" . "https://orgmode.org/elpa/")
        ))
#+END_SRC

=melpa= 一般是最新的（daily build），支持最新的特性当然也不稳定； =melpa-stable= 对应的是正式版，如果没有很大的折腾劲的话，建议使用 stable。

如果有代理的话，可以设置 HTTP 代理：

#+BEGIN_SRC emacs-lisp
(setq url-proxy-services
      '(
        ("http" . "127.0.0.1:1080")
        ("https" . "127.0.0.1:1080")
        ))
#+END_SRC

或者 Emacs 启动时添加 =http_proxy= 。比如 =http_proxy=http://127.0.0.1:1080 emacs= 。

我使用 [[https://github.com/jwiegley/use-package][use-package]] 来简化和规范包的配置，因为源不统一，经常会遇到包依赖问题，比如 [[https://github.com/abo-abo/swiper/issues/2087][issues#2087]]；
还有时会遇到有的包想用稳定版本，有的包想用最新版本的情况。所以在配置的时候，通过 =(setq use-package-always-pin t)= 规范 use-package，
强制显式指定源，这样可以满足更多的个性化需求。比如：

#+begin_src emacs-lisp
(use-package swiper
  :pin melpa
  :ensure t
  :config
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "M-s .") 'swiper-isearch-thing-at-point)
  )
#+end_src

上面的 =pin= 可以设置为 =package-archives= 列表中的值。

* 插件推荐

Emacs 有很多的 [[http://melpa.org][插件]]，[[https://github.com/emacs-tw/awesome-emacs][awesome-emacs]] 是按照分类整理的。下面列一下我正在使用的插件以及一些说明：

|--------------------+--------------------------------------+----------------------------------------------------------------------|
| 插件名称           | 插件介绍                             | 备注                                                                 |
|--------------------+--------------------------------------+----------------------------------------------------------------------|
| [[https://github.com/abo-abo/ace-window][ace-window]]         | 多窗口切换                           | 以前一直用 [[https://github.com/deb0ch/emacs-winum][emacs-winum]]                                               |
| [[https://github.com/abo-abo/avy][avy]]                | 光标快速定位（按照字符、单词、行等） | 以前用的是 [[https://github.com/winterTTr/ace-jump-mode][ace-jump]]                                                  |
| [[https://github.com/company-mode/company-mode][company-mode]]       | 模块化补全框架（支持各种语言）       | 相同的还有 auto-complete，但它没有 company 精准。编码必备。          |
| [[https://github.com/seagle0128/doom-modeline][doom-modeline]]      | modeline 看起来漂亮一些              | 依赖 [[https://github.com/domtronn/all-the-icons.el][all-the-icons]] _GUI 才可用_                                      |
| [[https://github.com/magnars/expand-region.el][expand-region]]      | 快速选中文本                         | 比如我常用 =M-s s= 选中一个单词，用 ~M-s p~ 选中括号内内容，然后复制 |
| [[https://www.flycheck.org/en/latest/][Flycheck]]           | 强大的语法检查框架                   | 需要编程语言的 lint 工具配合，比如 eslint、golint。编码必备。        |
| [[https://github.com/nonsequitur/git-gutter-plus][git-gutter+]]        | 提示当前 buffer 改动部分             | 用 ~+~ 和 ~=~ 等显示出来                                             |
| [[https://github.com/nschum/highlight-symbol.el][highlight-symbol]]   | 高亮当前单词                         |                                                                      |
| [[https://github.com/abo-abo/swiper][ivy]]                | 通用完成前端                         | 一般 ido+smex，ivy，[[https://github.com/emacs-helm/helm][helm]] 三者必须选一                                |
| [[https://github.com/emacs-lsp/lsp-mode][lsp-mode]]           | [[https://langserver.org][LSP]] 的 Emacs 客户端                  | -目前不是特别成熟-                                                   |
| [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]   | 多鼠标操作                           | [[http://emacsrocks.com/e13.html][Emacs Rocks! Episode 13: multiple-cursors]]                            |
| [[https://orgmode.org][org-mode]]           | 最牛逼的插件，没有之一               |                                                                      |
| [[https://github.com/bbatsov/projectile][projectile]]         | 项目管理框架                         | 可以与 ivy 一起使用，[[https://github.com/ericdanan/counsel-projectile][counsel-projectile]]                              |
| [[https://github.com/skuro/plantuml-mode][plantuml-mode]]      | [[https://plantuml.com/][PlantUML]] 的 Emacs mode               | 需要安装环境                                                         |
| [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] | 彩虹括号                             | 相同层级的括号相同颜色                                               |
| [[https://github.com/felipeochoa/rjsx-mode][rjsx-mode]]          | JSX mode                             | 比 web-mode 好用很多，而且更新的快                                   |
| [[https://github.com/jwiegley/use-package][use-package]]        | 包配置隔离                           | 可设置启动时机，加速 Emacs 启动                                      |
| [[https://github.com/justbur/emacs-which-key][which-key]]          | 快捷键绑定提示                       |                                                                      |
|--------------------+--------------------------------------+----------------------------------------------------------------------|

一些尝试过，但是不再使用的 package：

- [[https://github.com/auto-complete/auto-complete][auto-complete]] 自动完成插件，后来用 company 替换了
- [[https://github.com/technomancy/better-defaults][better-defaults]] 几行代码就可以达到相同的效果
- [[https://github.com/emacs-dashboard/emacs-dashboard][dashboard]] 启动会显示最近使用过的文件，项目，标签等 华而不实啊
- [[https://github.com/emacsmirror/diminish][diminish]] 减少一些 mode 在 modeline 上的显示，doom-modeline 显示已经很精简了
- [[https://github.com/emacs-helm/helm][helm]] 一个补全框架，用了四五年，后来用 ivy 替换掉了
- [[https://github.com/magit/magit][magit]] 评价非常高的 git package，但是我感觉太慢了，另外是习惯了命令行操作 git，常用的操作用 build-in 的功能足够了，见 [[#manual-vc][版本管理]]
- [[https://github.com/milkypostman/powerline][powerline]] 用了一段时间，后来用 doom-modeline 替换掉了
- [[https://github.com/joaotavora/yasnippet][yasnippet]] 代码片段，以前写 C++ 的时候常用，现在感觉不咋用了
- [[https://github.com/tumashu/cnfonts][cnfonts]] GUI 中英文混排等宽，等宽是可以了，但是不等高啊.. 中英文的输入跳跃太难受了

* 日常使用

使用一个编码工具，无论是 Vim/Emacs，还是 Sublime/Atom/VSCode，甚至是 PyCharm/VS 系列，除了生态（社区支持，插件是否完整）之外，
最重要的是工作流。单纯快捷键差别在不同的编码环境下切换成本都不大，核心的成本在于养成的工作流（习惯）不容易改变。

** 日常编辑

|-----------+-------------------------------------------------------|
| 快捷键    | 功能                                                  |
|-----------+-------------------------------------------------------|
| ~C-c j~   | 当前 git 中搜索                                       |
| ~C-c k~   | 当前目录下搜索（使用 ag）                             |
| ~C-n/p~   | campany popup 模式下选择上一个/下一个                 |
| ~C-s~     | 全文搜索                                              |
| ~C-x g~   | 打开 git-gutter+                                      |
| ~C-x n/p~ | 上一个/下一个 git 改动                                |
| ~C-x r~   | revert 当前改动                                       |
| ~F12~     | semantic-or-imenu，显示当前文件的全局变量、类，方法等 |
| ~F3~      | 打开 Eshell                                           |
| ~F4~      | 插入当前时间，比如 <2020-03-12 22:07:58 四>           |
| ~F6~      | 显示当前文件路径                                      |
| ~F7~      | 执行前一条命令                                        |
| ~M--~     | 高亮当前单词， ~M-p/n~ 跳转到上一个和下一个           |
| ~M-m~     | 不断扩大区域的选中                                    |
| ~M-s ;~   | 跳转到单词                                            |
| ~M-s D~   | 切换到暗色主题                                        |
| ~M-s f~   | 选中当前函数                                          |
| ~M-s i~   | 跳转到指定符开始的单词                                |
| ~M-s j~   | 快速跳转到行                                          |
| ~M-s k~   | 复制指定行到当前行                                    |
| ~M-s l~   | 打开/关闭行号                                         |
| ~M-s L~   | 切换到亮色主题                                        |
| ~M-s m~   | 选中注释                                              |
| ~M-s p~   | 选中括号内的内容(包含括号)                            |
| ~M-s P~   | 选中括号内的内容                                      |
| ~M-s s~   | 选中当前单词                                          |
| ~M-y~     | kill-ring                                             |
|-----------+-------------------------------------------------------|

** 多鼠标操作

选中要改动的单词，然后：

|-----------+------------------------|
| 快捷键    | 功能                   |
| ~M-s ;~   | 选择当前函数选中的单词 |
| ~M-s >~   | 选择下一个相同的单词   |
| ~M-s <~   | 选择上一个相同的单词   |
| ~M-s C-a~ | 选择所有与单词相同的   |
|-----------+------------------------|

** 项目管理

使用 projectile 之后，包含 ~.svn~ ~.git~ 的项目，Emacs 会自动识别为一个项目，也可以手动添加一个空的 ~.projectile~ 文件到项目中。
但是，设置 projectile-indexing-method 为 =native= 并且关闭 =projectile-enable-caching= 之后，project 只认 =.projectile=
=.projectile= 跟 =.gitignore= 一样有很多的规则，具体请看 [[https://www.projectile.mx/en/latest/projects/#ignoring-files][Ignoring files]]

|-------------+------------------------------------------------------------------------------------|
| 快捷键      | 功能                                                                               |
|-------------+------------------------------------------------------------------------------------|
| ~C-c g~     | 在当前的 git 文件中打开文件，很好用                                                |
| ~C-c p b~   | 切换 buffer，类似 ~C-x b~ ，只不过是针对当前项目的                                 |
| ~C-c p b~   | 在当前项目打开的 Buffer 中切换                                                     |
| ~C-c p f~   | 在打开的项目中打开文件                                                             |
| ~C-c p i~   | 清空 projectile 当前项目的缓存（有的时候文件被删掉了需要清理一下，不然会造成干扰） |
| ~C-c p p~   | 切换项目                                                                           |
| ~C-c p s g~ | 当前项目下面下搜索，使用 grep 命令，不过我更喜欢用 ag => ~C-c p s s~ 或者 ~C-c k~  |
|-------------+------------------------------------------------------------------------------------|

** 多窗口

结合 avy 实现，默认的切换快捷键（ ~C-x o~ ）很鸡肋。

|------------------+-----------------------------------|
| 快捷键           | 功能                              |
|------------------+-----------------------------------|
| ~C-x 0~          | 关闭当前窗口（并不是关闭 Buffer） |
| ~C-x 1~          | 只保留当前窗口                    |
| ~C-x 2~          | 水平分屏                          |
| ~C-x 3~          | 垂直分屏                          |
| ~M-o 1/2/3/4...~ | 切换窗口                          |
| ~M-s t~          | 交换窗口 =ace-swap-window=        |
| ~<f2> -/=~       | 水平缩减/扩展当前窗口             |
| ~<f2> _/+~       | 垂直缩减/扩展当前窗口             |
| ~<f2> g/l~       | 字体变大或者缩小（GUI 有效）      |
|------------------+-----------------------------------|

** IDE

#+begin_quote
语言的开发环境配置一直很费时间，我记得以前刚配置 C/C++ 的开发环境时，折腾了一个月左右时间才找到一个相对比较
满意的开发环境（折腾完之后使用起来可真爽啊）： ~xcscope + etags + c++-mode~ 。

写 Python 的时候也折腾了长时间的缩进问题。 Go 就更不用说了···，Go 工具链很完整，但由于 Go 的版本升级很快，工具链根本跟不上， +gocode+ 已经迁移了三次地址了。

后来看到了 [[https://langserver.org/][LSP（Language Server Protocol）]] 项目，感觉这个项目才是终极解法：插件化，C/S 模式。
目前已经默认支持 Python 和 Go 了，虽然还是有许许多多的 Bug，但比起 2018 年我试的时候已经成熟太多了。有社区的驱动，发展很快。
#+end_quote

*** Go

按照 [[https://golang.org/doc/install][官方说明]] 安装 Go，LSP server 用的是 [[https://github.com/golang/tools/tree/master/gopls][gopls]]。

guru: a tool for answering questions about Go source code.

#+begin_src sh
go get golang.org/x/tools/cmd/guru
go get golang.org/x/tools/gopls@latest
#+end_src

*** TODO Python
*** LSP 使用

1. =lsp-workspace-folders-remove= 可以移出之前添加的 workspace，但是如果遇到大的目录变更，一个一个的移出很慢。
   目前似乎没有提供一次性 remove all 的方法。一个解决办法是删除 lsp 的存储文件（lsp 提供了 =lsp-session-file= 变量来定义文件路径，
   默认在 =.emacs.d/.lsp-session-*= 路径下，如果没找到也可以在 lsp 源代码中搜索 lsp-session-file）。
2. 当前 LSP 还不太稳定，遇到各种问题就可以重启是最有效的办法： =lsp-workspace-restart=

** 版本管理
   :PROPERTIES:
   :CUSTOM_ID: manual-vc
   :END:

在不使用任何插件的情况下（内置的 VC），svn 和 git 都支持：

|-----------+--------------------|
| 快捷键    | 功能               |
|-----------+--------------------|
| ~C-x v =~ | 文件 diff          |
| =C-x v l= | 当前文件提交记录   |
| =C-x v += | git pull，svn up   |
| =C-x v P= | git push，svn push |
|-----------+--------------------|

** Org Mode
   :PROPERTIES:
   :CUSTOM_ID: manual-org-mode
   :END:

[[https://orgmode.org/][org-mode]] 是 Emacs 最强力的插件，没有之一。可以用来做 GTD，博客/Wiki工具，写书，写论文等。
orgmode 是 emacs 自带的 package，但是一般自带的版本比较低。更新到最新版本的办法：

将 =("org" . "https://orgmode.org/elpa/")= 添加到 =package-archives= 中，然后：

#+begin_src emacs-lisp
  (use-package org
    :pin org
    :ensure org-plus-contrib
    )
#+end_src

注意是 =org-plus-contrib= ，而不是 =org= 。

常用快捷键：

|-------------+--------------------------------------------------------------|
| 快捷键      | 功能                                                         |
|-------------+--------------------------------------------------------------|
| =C-c C-e=   | Export or Publish                                            |
| =C-c C-l=   | 插入链接等                                                   |
| =C-c '=     | 在另外一个窗口编辑：代码，表格，公式等                       |
| =C-c C-x p= | 插入标题 =PROPERTIES=                                        |
| =C-c C-o=   | 打开当前链接 ~org-open-at-point~                             |
| =C-c C-,=   | 插入结构化模板（类似代码，引用等），orgmode 9.2 版本之后支持 |
| =C-c C-c=   | 标题上添加 Tag，可以用来分类或者打标签                       |
|-------------+--------------------------------------------------------------|

扩展：

- [[file:../../../blog/2019/build-site-with-org-mode.org][使用 org-mode 搭建网站]]
- [[file:../../../blog/2019/emacs-slice.org][Emacs 基于 org-reveal 做幻灯片]]
- GTD 相关文章：
  - [[https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html][Orgmode for GTD]]
  - [[http://members.optusnet.com.au/~charles57/GTD/gtd_workflow.html][How I use Emacs and Org-mode to implement GTD]]

<2020-02-15 10:15:16>

orgmode 9.2 之后不再直接支持 =<s [Tab]= 的快捷方式插入代码块，而提供了统一的 =org-insert-structure-template= 函数，快捷键为 =C-c C-,= 。
如果想要提供以前的简洁方式，需要引入 =org-tempo= ，比如 =(require 'org-tempo)= 我使用的是 =(use-package org-tempo)= 。具体见：

- [[https://emacs.stackexchange.com/questions/46988/why-do-easy-templates-e-g-s-tab-in-org-9-2-not-work][Why do easy templates, .e.g, “< s TAB” in org 9.2 not work?]]
- [[https://orgmode.org/manual/Structure-Templates.html][org-mode 16.2 Structure Templates]]

<2020-03-09 17:13:03 Mon>

orgmode 中 =_= 和 =^= 会被输出成下标和上标语法，可以在 =+OPTIONS= 中设置 =^:nil= 来禁掉它。

- https://emacs.stackexchange.com/questions/10549/org-mode-how-to-export-underscore-as-underscore-instead-of-highlight-in-html

* FAQ
** Emacs 启动速度太慢怎么办？

~M-x emacs-init-time~ 可以查看 Emacs 启动耗费时间。

多一个插件都会增加启动成本，不信你 ~emacs -Q~ 试试，所以要尽可能的减少插件。你可以使用 [[https://github.com/dacap/keyfreq][keyfreq]] 来查看你常用的快捷键有哪些。筛选出不常用的插件给干掉，这是解决启动速度慢的根本办法。

如何定位插件耗时？

- 使用 profiler：https://punchagan.muse-amuse.in/blog/how-i-learnt-to-use-emacs-profiler/
- 使用 esup：https://github.com/jschaf/esup
- 使用 https://github.com/purcell/emacs.d/blob/master/lisp/init-benchmarking.el

定位之后如何优化？

elisp 比较熟的有自己的办法优化，当然我不熟。我的解决办法是：

- 基本上不用的插件、UI 上炫酷的插件都干掉
- 使用 [[https://github.com/jwiegley/use-package][use-package]] ，use-package 并不是包管理工具，只是一个宏，用来配置和加载包。
  你可以设置延迟加载包，以提高第一次打开的速度。还有一个好处是，使用 use-package 组织包更清晰，对于 use-package 我还处于研究阶段，粗暴的使用 ~:init~ 和 ~:config~ 配置，实际上有很多优雅的方法

** 如何将 markdown 转成 org-mode

~.org~ 文件可以很轻松的通过 ~org-md-export-to-markdown~ 生成 =.md= 文件。 =.md= 文件可以借助 Pandoc 生成 =.org=  [fn:md-to-org]。

#+BEGIN_SRC shell
pandoc -f markdown -t org -o test.org test.md
#+END_SRC

** Org mode 如何排序，按列表，按标题等

=org-sort*= [fn:sorting-headings-in-an-org-file]

** 使用 GUI 版本还是 Terminal ?

推荐 GUI 的人比 Terminal 的多很多，这个分歧很大，各有优劣势。

对我来说，GUI 中英文等宽等高的问题无法解决，折腾了很多次，最终决定实用终端，不折腾了。

** 如何去掉空白字符

+ ~M-\~ ：删除光标周围的空格和 tab
+ ~M-<SPC>~ ：删除光标周围的空格和 tab，但是保留一个

另外，我会给文件保存（~C-x s~）时，添加一个 hook：

#+BEGIN_SRC emacs-lisp
(setq show-trailing-whitespace t)
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

这样在每次保存文件的时候，会自动删掉每行或者段落后面多于的空白字符和空行。

** 如何显示所有安装的 package
=C-h v package-activated-list= [fn:package-actived-list]
** 如何更新所有的依赖包？

1. ~M-x list-package~
1. ~U~ 标记所有不是最新的包
1. ~x~ 执行更新

** 如何记忆 Emacs 快捷键？

Emacs 的快捷键非常多，但是除了基本的编辑操作快捷键之外（就是上面描述的内容）并不需要刻意的记忆，只要你掌握了两点：

1) 在 Emacs 中所有的快捷键对应的都是一个 Lisp 函数，快捷键忘了的话，可以使用 ~M-x~ 调用函数来实现相应的功能（如果使用了 helm 或者 ivy，绑定的快捷键会自动显示出来）
2) 查看当前 mode 的所有快捷键可以使用 ~C-h m~ 寻求帮助，正如第一条所述： ~C-h m~ 对应的函数是 ~describe-mode~

另外，Emacs 有个 [[https://github.com/justbur/emacs-which-key][emacs-which-key]] 的插件，有快捷键提示。比如，在 Markdown 模式下，快捷键前缀都是 ~C-c C-c~ 但是后面你可能忘了，当你按下 ~C-c C-c~ 时，它会这样提示你：

[[https://wiki-1252349778.cos.ap-shanghai.myqcloud.com/2019/emacs-wiki-which-key-0.png]]

** 如何软重启 Emacs？

所谓软重启指的是通过命令重新加载配置文件：

- ~eval-buffer~ 会执行当前 buffer 的 lisp，切换到 ~init.el~ 文件，然后执行 ~eval-buffer~
- 在 ~*scratch*~ 中输入 ~(load-file user-init-file)~ ，然后选中 ~C-x C-e~

两个的原理差不多， ~C-x C-e~ 是执行选中的内容， ~eval-buffer~ 是执行当前 buffer。

** 我可不可以用 Emacs 完成 XXX 能做的事情？

没有银弹！纵然 Emacs 可能「可以做任何事情」，比如收发邮件、GTD、阅读 pdf、打开图片等等。然而我以为用合适的工具做合适的事情才是重要的.

** 是否要使用 Evil ？

因人而异，如果之前你曾是 Vim 用户，建议你用 Evil。因为我一开始就用的是 Emacs，而不是 Vim，所以我一直用的是 Emacs 的键映射。

** 行逆序排序
1. ~M-x sort-lines~
2. ~M-x reverse-region~

** eshell git diff 高亮

在 =.git/config= 文件中添加[fn:3]：

#+begin_src
[color]
    ui = always
#+end_src

因为我用的是 eshell，ansi-term 默认就是一个 ansi color 的 term。但是用惯了 eshell 不想换了。

* Troubleshooting
** 安装 lsp-mode 报错 spinner-1.7.3 is unavailable？

spinner 在 =gnu= 中，确保 =package-archives= 中包含 =https://elpa.gnu.org/packages/= 。

** lsp go: Suspicious state fromsyntax checker go-vet ?

错误是由 flycheck 报出来的，高于 1.12 的 Go =go vet= 已被废弃，而是使用 =go tool vet= 代替。 flycheck 最新稳定的版本还停留在 =Flycheck 31= 支持到 go1.11 。
解决办法是要么升级 flycheck，使用 =melpa= 源，不要用 =melpa-stable= 即可 [fn:2]。

* Resource
** Blog/Site/Tutorial

+ [[https://github.com/emacs-tw/awesome-emacs][awesome-emacs]]
+ [[https://planet.emacslife.com/][Planet Emacslife]]：Emacs 百科全书，大杂烩
+ [[https://emacsthemes.com/][Emacs Themes]]：主题集合
+ [[http://oremacs.com/][oremacs]]

** Media

- [[https://cestlaz.github.io/stories/emacs/][Using Emacs Series]]：cestlaz 的使用 Emacs 系列，偏向于插件介绍。
- [[https://www-users.cs.umn.edu/~kauffman/tooltime/][ToolTime]] 前两节是讲 Emacs 的，理论+实践，有视频还有配套的 PPT，一般的资料都是讲什么用，而这个课程讲了为什么是这样，由浅入深；非常推荐。

** Article

+ [[https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/guide-zh.org][一年成为 Emacs 高手 (像神一样使用编辑器)]]， =@chenbin= 解释了 Emacs 的好处以及如何成为高手。

** Configure reference

社区有很多优秀的配置（我的配置大多都是到处「摘抄」的）：

- [[https://github.com/purcell/emacs.d][purcell/emacs.d]]：久负盛名
- [[https://github.com/redguardtoo/emacs.d][redguardtoo/emacs.d]]
- [[https://github.com/hlissner/doom-emacs][hlissner/doom-emacs]]
- [[https://protesilaos.com/dotemacs/][Emacs initialisation file (dotemacs)]]: wiki + 配置
- [[http://www.emacs-bootstrap.com/][emacs-bootstrap]]: 动态生成 Emacs 配置

** org-mode theme

- [[https://jessekelly881-imagine.surge.sh][Imagine]]: 范例 [[https://jessekelly.tk/][Jesse Kelly]]
- [[https://jessekelly881-rethink.surge.sh][Rethink]]
- [[https://github.com/gongzhitaao/orgcss][orgcss]]: 范例 [[https://gongzhitaao.org/orgcss/][CSS for Org-exported HTML]]
- [[https://github.com/fniessen/org-html-themes][org-html-themes]]
- 我自己网站的 CSS 文件：https://raw.githubusercontent.com/zhangjie2012/site/master/static/site.css

** 知名的 Emacs 用户有哪些？

[[http://ergoemacs.org/misc/famous_emacs_users.html][Famous Emacs Users]]

- Donald Knuth: 计算机程序设计艺术的作者
- Julian Assange: 维基解密 董事与发言人
- 松本行弘: Ruby 之父，而且做过 How Emacs changed my life 的演讲，[[https://www.slideshare.net/yukihiro_matz/how-emacs-changed-my-life][ppt]]
- Rich Hickey: Clojure 之父
- Joe Armstrong: Erlang 语言设计者和主架构师
- Andrei Alexandrescu: D lang 创建者之一
- [[https://zh.wikipedia.org/wiki/%E5%8F%B2%E8%92%82%E8%8A%AC%C2%B7%E6%B2%83%E7%88%BE%E5%A4%AB%E5%8B%92%E5%A7%86][Stephen Wolfram]]

[[https://usesthis.com/interviews/graydon.hoare/][Graydon Hoare]] 也使用 Emacs，他是 Rust 编程语言项目的启动者。

[[http://wenshanren.org/?p=418][Famous Emacs Users (that are not famous for using Emacs)]] 也列举了很多知名的和非知名的 Emacs 用户。

[以上均来自 [[https://www.reddit.com/r/emacs/comments/fdxvuw/which_famous_devs_use_emacs/][reddit]] 的讨论帖。]

* Footnotes

[fn:md-to-org] https://emacs.stackexchange.com/questions/5465/how-to-migrate-markdown-files-to-emacs-org-mode-format

[fn:1] https://stackoverflow.com/questions/52722096/build-emacs-and-gnutls-not-found

[fn:package-actived-list] https://stackoverflow.com/questions/13866848/how-to-save-a-list-of-all-the-installed-packages-in-emacs-24

[fn:sorting-headings-in-an-org-file] https://emacs.stackexchange.com/questions/30547/sort-list-by-checked-unchecked-state

[fn:2] https://github.com/hlissner/doom-emacs/issues/1225

[fn:3] http://mbork.pl/2018-06-10_Git_diff_in_Eshell
